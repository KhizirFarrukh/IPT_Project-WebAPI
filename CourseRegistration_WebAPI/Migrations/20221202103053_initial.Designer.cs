// <auto-generated />
using System;
using CourseRegistration_WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseRegistrationWebAPI.Migrations
{
    [DbContext(typeof(CourseRegistrationDbContext))]
    [Migration("20221202103053_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.CoreCourse", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("prevChainID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("prevChainID")
                        .IsUnique();

                    b.ToTable("CoreCourses");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.Course", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("creditHours")
                        .HasColumnType("int");

                    b.Property<Guid>("deptID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("deptID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.CourseLog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("courseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("sectionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("teacherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("courseID");

                    b.HasIndex("sectionID");

                    b.HasIndex("teacherID");

                    b.ToTable("CourseLogs");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.Department", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.LabCourse", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("theoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("theoryID")
                        .IsUnique();

                    b.ToTable("LabCourses");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.RegisteredCourse", b =>
                {
                    b.Property<string>("studentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("courseLogID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("studentID", "courseLogID");

                    b.HasIndex("courseLogID");

                    b.ToTable("RegisteredCourses");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.Section", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("deptID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("postfixCharacter")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("semesterNo")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("deptID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.Student", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("batchYear")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("sectionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("sectionID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.StudentLogin", b =>
                {
                    b.Property<string>("studentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("studentID");

                    b.ToTable("StudentLogins");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.Teacher", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.TheoryCourse", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TheoryCourses");
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.CoreCourse", b =>
                {
                    b.HasOne("CourseRegistration_WebAPI.Models.TheoryCourse", null)
                        .WithOne()
                        .HasForeignKey("CourseRegistration_WebAPI.Models.CoreCourse", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseRegistration_WebAPI.Models.CoreCourse", null)
                        .WithOne()
                        .HasForeignKey("CourseRegistration_WebAPI.Models.CoreCourse", "prevChainID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.Course", b =>
                {
                    b.HasOne("CourseRegistration_WebAPI.Models.Department", null)
                        .WithMany()
                        .HasForeignKey("deptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.CourseLog", b =>
                {
                    b.HasOne("CourseRegistration_WebAPI.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("courseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseRegistration_WebAPI.Models.Section", null)
                        .WithMany()
                        .HasForeignKey("sectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseRegistration_WebAPI.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("teacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.LabCourse", b =>
                {
                    b.HasOne("CourseRegistration_WebAPI.Models.Course", null)
                        .WithOne()
                        .HasForeignKey("CourseRegistration_WebAPI.Models.LabCourse", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseRegistration_WebAPI.Models.TheoryCourse", null)
                        .WithOne()
                        .HasForeignKey("CourseRegistration_WebAPI.Models.LabCourse", "theoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.RegisteredCourse", b =>
                {
                    b.HasOne("CourseRegistration_WebAPI.Models.CourseLog", null)
                        .WithMany()
                        .HasForeignKey("courseLogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseRegistration_WebAPI.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("studentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.Section", b =>
                {
                    b.HasOne("CourseRegistration_WebAPI.Models.Department", null)
                        .WithMany()
                        .HasForeignKey("deptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.Student", b =>
                {
                    b.HasOne("CourseRegistration_WebAPI.Models.Section", null)
                        .WithMany()
                        .HasForeignKey("sectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.StudentLogin", b =>
                {
                    b.HasOne("CourseRegistration_WebAPI.Models.Student", null)
                        .WithOne()
                        .HasForeignKey("CourseRegistration_WebAPI.Models.StudentLogin", "studentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseRegistration_WebAPI.Models.TheoryCourse", b =>
                {
                    b.HasOne("CourseRegistration_WebAPI.Models.Course", null)
                        .WithOne()
                        .HasForeignKey("CourseRegistration_WebAPI.Models.TheoryCourse", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
